`Content-Type` = "application/x-www-form-urlencoded"),
body = list(grant_type = "client_credentials",
scope = "/read-public",
client_id = orcid_client_id,
client_secret = orcid_client_secret),
encode = "form")
library(httr)
library(httr)
orcid_client_id <- "APP-B9MWICVT9H801B95"
orcid_client_secret <- "7b5812cd-30d8-48c9-a2b7-4c739520ced1"
orcid_request <- POST(url  = "https://orcid.org/oauth/token",
config = add_headers(`Accept` = "application/json",
`Content-Type` = "application/x-www-form-urlencoded"),
body = list(grant_type = "client_credentials",
scope = "/read-public",
client_id = orcid_client_id,
client_secret = orcid_client_secret),
encode = "form")
orcid_response <- content(orcid_request)
print(orcid_response$access_token)
orcid_token <- Sys.getenv("ORCID_TOKEN")
library(rorcid)
library(dplyr)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data |>
filter(!is.na(orcid_id))|>
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
usethis::edit_r_environ()
usethis::edit_r_environ()
library(rorcid)
library(dplyr)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data |>
filter(!is.na(orcid_id))|>
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
orcid_token <- Sys.getenv("ORCID_TOKEN")
library(rorcid)
library(dplyr)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data |>
filter(!is.na(orcid_id))|>
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
orcid_token <- Sys.getenv("ORCID_TOKEN")
print(orcid_token)
pubs <- orcid_works(orcid_id, token = orcid_token)
orcid_works()
library(rorcid)
library(dplyr)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data |>
filter(!is.na(orcid_id))|>
pull(orcid_id)
library(httr)
# Test the API token by making a request
response <- GET(
url = paste0("https://pub.orcid.org/v3.0/", orcid_ids[1], "/works"),
add_headers(Authorization = paste("Bearer", orcid_token))
)
# Check the status code and content of the response
print(status_code(response))
print(content(response, "text"))
library(httr)
orcid_client_id <- "APP-B9MWICVT9H801B95"
orcid_client_secret <- "7b5812cd-30d8-48c9-a2b7-4c739520ced1"
orcid_request <- POST(url  = "https://orcid.org/oauth/token",
config = add_headers(`Accept` = "application/json",
`Content-Type` = "application/x-www-form-urlencoded"),
body = list(grant_type = "client_credentials",
scope = "/read-public",
client_id = orcid_client_id,
client_secret = orcid_client_secret),
encode = "form")
orcid_response <- content(orcid_request)
orcid_token <- Sys.getenv("ORCID_TOKEN")
library(rorcid)
library(dplyr)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data |>
filter(!is.na(orcid_id))|>
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
library(httr)
orcid_client_id <- "APP-B9MWICVT9H801B95"
orcid_client_secret <- "7b5812cd-30d8-48c9-a2b7-4c739520ced1"
orcid_request <- POST(url  = "https://orcid.org/oauth/token",
config = add_headers(`Accept` = "application/json",
`Content-Type` = "application/x-www-form-urlencoded"),
body = list(grant_type = "client_credentials",
scope = "/read-public",
client_id = orcid_client_id,
client_secret = orcid_client_secret),
encode = "form")
orcid_response <- content(orcid_request)
print(orcid_response$access_token)
Sys.setenv("ORCID_TOKEN"=orcid_response$access_token)
library(rorcid)
library(dplyr)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data |>
filter(!is.na(orcid_id))|>
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
library(httr)
orcid_client_id <- "APP-B9MWICVT9H801B95"
orcid_client_secret <- "7b5812cd-30d8-48c9-a2b7-4c739520ced1"
orcid_request <- POST(url  = "https://orcid.org/oauth/token",
config = add_headers(`Accept` = "application/json",
`Content-Type` = "application/x-www-form-urlencoded"),
body = list(grant_type = "client_credentials",
scope = "/read-public",
client_id = orcid_client_id,
client_secret = orcid_client_secret),
encode = "form")
orcid_response <- content(orcid_request)
print(orcid_response$access_token)
Sys.setenv("ORCID_TOKEN"=orcid_response$access_token)
orcid_ids <- orcid_data |>
filter(!is.na(orcid_id))|>
pull(orcid_id)
orcid_ids <- orcid_data |>
filter(!is.na(orcid_id))|>
pull(orcid_id)
library(tidyverse)
library(rorcid)
library(tidyverse)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data %>%
filter(!is.na(orcid_id)) %>%
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
all_pubs <- bind_rows(all_pubs)
# Print the publications for each ORCID ID
print(all_pubs)
tibble(
title = work$title$title$value,
DOI = work$`external-ids.external-id` %>%
keep(~ .[['external-id-type']] == "doi") %>%
map_chr(~ .[['external-id-value']]) %>%
first(default = NA_character_),
authors = paste(work$`path`, collapse = ", "),
publication_date = work$`publication-date.year.value`,
journal_name = work$`journal-title.value`
)
library(rorcid)
library(tidyverse)
# Function to fetch and format ORCID publications
get_publications_from_rorcid <- function(orcid_ids) {
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
# Error handling in case fetching works fails
pubs <- tryCatch({
orcid_works(orcid_id)
}, error = function(e) {
message(paste("Failed to retrieve works for ORCID ID:", orcid_id))
return(NULL)
})
# If publications exist, format them
if (!is.null(pubs)) {
works <- pubs[[1]]$works
# Extract relevant details
formatted_pubs <- works %>%
map_dfr(function(work) {
tibble(
title = work$title$title$value %||% NA_character_,
DOI = work$external-ids.external-id %>%
keep(~ .[['external-id-type']] == "doi") %>%
map_chr(~ .[['external-id-value']]) %>%
first(default = NA_character_),
authors = work$contributors.contributor %>%
map_chr(~ .[['credit-name.value']]) %>%
paste(collapse = ", ") %||% NA_character_,
publication_date = work$publication-date.year.value %||% NA_character_,
journal_name = work$journal-title.value %||% NA_character_
)
})
# Append to the list
all_pubs[[orcid_id]] <- formatted_pubs
}
}
# Combine all the publications into a single data frame
all_pubs_df <- bind_rows(all_pubs, .id = "orcid_id")
return(all_pubs_df)
}
usethis::edit_r_environ()
orcid_token <- Sys.getenv("ORCID_TOKEN")
orcid_token <- Sys.getenv("ORCID_TOKEN")
library(rorcid)
library(tidyverse)
# Function to fetch and format ORCID publications
get_publications_from_rorcid <- function(orcid_ids) {
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
# Error handling in case fetching works fails
pubs <- tryCatch({
orcid_works(orcid_id)
}, error = function(e) {
message(paste("Failed to retrieve works for ORCID ID:", orcid_id))
return(NULL)
})
# If publications exist, format them
if (!is.null(pubs)) {
works <- pubs[[1]]$works
# Extract relevant details
formatted_pubs <- works %>%
map_dfr(function(work) {
tibble(
title = work$title$title$value %||% NA_character_,
DOI = work$external-ids.external-id %>%
keep(~ .[['external-id-type']] == "doi") %>%
map_chr(~ .[['external-id-value']]) %>%
first(default = NA_character_),
authors = work$contributors.contributor %>%
map_chr(~ .[['credit-name.value']]) %>%
paste(collapse = ", ") %||% NA_character_,
publication_date = work$publication-date.year.value %||% NA_character_,
journal_name = work$journal-title.value %||% NA_character_
)
})
# Append to the list
all_pubs[[orcid_id]] <- formatted_pubs
}
}
# Combine all the publications into a single data frame
all_pubs_df <- bind_rows(all_pubs, .id = "orcid_id")
return(all_pubs_df)
}
orcid_token <- Sys.getenv("ORCID_TOKEN")
orcid_token <- Sys.getenv("ORCID_TOKEN")
print(orcid_token)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data %>%
filter(!is.na(orcid_id))%>%
pull(orcid_id)
library(rorcid)
library(tidyverse)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data %>%
filter(!is.na(orcid_id))%>%
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
library(rorcid)
Sys.getenv("ORCID_TOKEN") # Double-check the token
# Test fetching works for a specific ORCID ID
test_id <- "0000-0002-1825-0097" # Replace with a valid ORCID ID if needed
pubs <- orcid_works(test_id)
usethis::edit_r_environ()
orcid_token <- Sys.getenv("ORCID_TOKEN")
print(orcid_token)
library(rorcid)
library(tidyverse)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data %>%
filter(!is.na(orcid_id))%>%
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
usethis::edit_r_environ()
library(rorcid)
library(tidyverse)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data %>%
filter(!is.na(orcid_id))%>%
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
usethis::edit_r_environ()
/Users/parnika/.Renviron
library(rorcid)
library(tidyverse)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data %>%
filter(!is.na(orcid_id))%>%
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
orcid_token <- Sys.getenv("ORCID_TOKEN")
print(orcid_token)
usethis::edit_r_environ()
orcid_token <- Sys.getenv("ORCID_TOKEN")
print(orcid_token)
library(rorcid)
library(tidyverse)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data %>%
filter(!is.na(orcid_id))%>%
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
test_id <- "0000-0002-1825-0097"  # Replace with a known valid ORCID ID
test_response <- orcid_works(test_id)
orcid_token <- Sys.getenv("ORCID_TOKEN")
print(orcid_token)
test_id <- "0000-0002-1825-0097"  # Replace with a known valid ORCID ID
test_response <- orcid_works(test_id)
usethis::edit_r_environ()
orcid_token <- Sys.getenv("ORCID_TOKEN")
print(orcid_token)
library(httr)
orcid_client_id <- "APP-B9MWICVT9H801B95"
orcid_client_secret <- "7b5812cd-30d8-48c9-a2b7-4c739520ced1"
orcid_request <- POST(url  = "https://orcid.org/oauth/token",
config = add_headers(`Accept` = "application/json",
`Content-Type` = "application/x-www-form-urlencoded"),
body = list(grant_type = "client_credentials",
scope = "/read-public",
client_id = orcid_client_id,
client_secret = orcid_client_secret),
encode = "form")
orcid_response <- content(orcid_request)
print(orcid_response$access_token)
Sys.setenv("ORCID_TOKEN"=orcid_response$access_token)
library(rorcid)
library(tidyverse)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data %>%
filter(!is.na(orcid_id))%>%
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
orcid_response <- content(orcid_request)
library(httr)
orcid_client_id <- "APP-B9MWICVT9H801B95"
orcid_client_secret <- "7b5812cd-30d8-48c9-a2b7-4c739520ced1"
orcid_request <- POST(url  = "https://orcid.org/oauth/token",
config = add_headers(`Accept` = "application/json",
`Content-Type` = "application/x-www-form-urlencoded"),
body = list(grant_type = "client_credentials",
scope = "/read-public",
client_id = orcid_client_id,
client_secret = orcid_client_secret),
encode = "form")
orcid_response <- content(orcid_request)
print(orcid_response$access_token)
Sys.setenv("ORCID_TOKEN"=orcid_response$access_token)
library(rorcid)
library(tidyverse)
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data %>%
filter(!is.na(orcid_id))%>%
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
all_pubs <- bind_rows(all_pubs)
# Print the publications for each ORCID ID
print(all_pubs)
library(rorcid)
library(tidyverse)
get_publications_from_orcid <- function() {
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data %>%
filter(!is.na(orcid_id)) %>%
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
all_pubs <- bind_rows(all_pubs)
# Print the publications for each ORCID ID
print(all_pubs)
}
library(rorcid)
library(tidyverse)
get_publications_from_orcid <- function() {
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data %>%
filter(!is.na(orcid_id)) %>%
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
all_pubs <- bind_rows(all_pubs)
# Print the publications for each ORCID ID
print(all_pubs)
}
library(rorcid)
library(tidyverse)
get_publications_from_orcid <- function() {
# Read the CSV file and extract ORCID IDs
orcid_data <- readr::read_csv("data-raw/orcid_gsid.csv")
orcid_ids <- orcid_data %>%
filter(!is.na(orcid_id)) %>%
pull(orcid_id)
# Initialize an empty list to store publications
all_pubs <- list()
# Loop over each ORCID ID to fetch their works
for (orcid_id in orcid_ids) {
pubs <- orcid_works(orcid_id)
all_pubs[[orcid_id]] <- pubs[[1]]$works
}
all_pubs <- bind_rows(all_pubs)
# Print the publications for each ORCID ID
print(all_pubs)
}
get_publications_from_orcid()
load("~/Desktop/achievement-scraper/data/orcid_gsid.rda")
# Reading the data
orcid_gsid <- readr::read_csv("data-raw/orcid_gsid.csv")
# Documenting the data
usethis::use_data(orcid_gsid, overwrite = T)
# Read the data
orcid_gsid <- readr::read_csv("data-raw/orcid_gsid.csv")
# Documenting the data
usethis::use_data(orcid_gsid, overwrite = T)
# Reading the data
orcid_gsid <- readr::read_csv("data-raw/orcid_gsid.csv")
# Document the data
usethis::use_data(orcid_gsid, overwrite = T)
# Saving the data
save(orcid_gsid, file = "data/orcid_gsid.rda")
